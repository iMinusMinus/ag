<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
           http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd" >

       <aop:aspectj-autoproxy/>
       
       <bean id="rest" class="org.springframework.web.client.RestTemplate">
	       	<property name="messageConverters">
	       		<list>
	       			<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
	       			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
	       				<constructor-arg index = "0" value = "UTF-8" />
	       			</bean>
	       			<bean class="org.springframework.http.converter.ResourceHttpMessageConverter" />
	       			<bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
	       			<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
	       			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	       		</list>
	       	</property>
       </bean>
       
       <!-- 单独拎出HSF部分，以备去除依赖 -->
       <!-- 开始 
       <bean class="ml.iamwhatiam.ag.builder.HsfConsumerBeanBuilder" />
       <bean id="hsfConfig" class="org.mybatis.spring.mapper.MapperFactoryBean">
       		<property name="mapperInterface" value="ml.iamwhatiam.ag.dao.HsfConsumerConfigDao" />
  			<property name="sqlSessionFactory" ref="sqlSessionFactory" />
       </bean>
       <bean id="hsf" class="ml.iamwhatiam.ag.service.impl.HsfDispatcherServiceImpl" />
       <bean id="hsfHttp" class="ml.iamwhatiam.ag.service.impl.HsfHttpDispatcherServiceImpl">
  			<property name="format" value="JSON" />
       </bean>
       <bean id="subscriber" class="ml.iamwhatiam.ag.support.MockSubscriber" />-->
       <!-- 结束 -->
       
        <!-- 单独拎出Dubbo部分，以备去除依赖 -->
       <!-- 开始 -->
       <bean class="ml.iamwhatiam.ag.builder.DubboReferenceBeanBuilder" />
       <bean id="dubboConfig" class="org.mybatis.spring.mapper.MapperFactoryBean">
       		<property name="mapperInterface" value="ml.iamwhatiam.ag.dao.DubboReferenceConfigDao" />
  			<property name="sqlSessionFactory" ref="sqlSessionFactory" />
       </bean>
       <bean id="dubbo" class="ml.iamwhatiam.ag.service.impl.DubboDispatcherServiceImpl" />
       <!-- 结束 -->
       
       <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
       		<property name="driverClassName" value="${spring.datasource.driverClassName}" />
       		<property name="url" value="${spring.datasource.url}" />
       		<property name="username" value="${spring.datasource.username}" />
       		<property name="password" value="${spring.datasource.password}" />
       </bean>
       
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:configurations.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="basePackage" value="ml.iamwhatiam.ag.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>       